debian 8 64bit系统。

更新一下系统软件
apt-get update
apt-get upgrade
apt-get install git

添加nginx和php7的key
wget -O- http://nginx.org/keys/nginx_signing.key | apt-key add -
wget -O- https://www.dotdeb.org/dotdeb.gpg | apt-key add -

添加nginx和php7的源
echo deb http://nginx.org/packages/debian/ jessie nginx > /etc/apt/sources.list.d/nginx.list
echo deb-src http://nginx.org/packages/debian/ jessie nginx >> /etc/apt/sources.list.d/nginx.list
echo "deb http://packages.dotdeb.org jessie all" > /etc/apt/sources.list.d/dotdeb.list

安装nginx+php7+mysql:
apt-get update
apt install nginx mysql-server php7.0 php7.0-fpm php7.0-mysql php7.0-curl php7.0-json php7.0-gd php7.0-intl php7.0-mbstring php7.0-xml php7.0-zip php7.0-exif php7.0-apcu
安装的过程中，要求你输入两次相同的密码，就是数据库的root密码。

把网站程序架设在/var/www里
mkdir -p /var/www
cd /var/www

安装SS-Panel 前端
git clone https://github.com/orvice/ss-panel.git 
cd ss-panel

创建数据库
mysql -u root -p
>CREATE DATABASE shadowsocks; 
>CREATE USER xxxx@localhost IDENTIFIED BY 'Password123'; ##创建本地xxxx的数据库用户，自己改，password123是密码，可以自己改。
>GRANT ALL PRIVILEGES ON shadowsocks.* TO 'xxxx'@'localhost'; ##授权本地xxxx用户shadowsocks数据库的全部权限。
>FLUSH PRIVILEGES;
>\q

composer安装
curl -sS https://getcomposer.org/installer | php
php composer.phar  install

修改 SS-Panel 配置文件
cp .env.example .env 
nano .env
内容如下：
//  ss-panel v3 配置
//
// !!! 修改此key为随机字符串确保网站安全 !!!
key = 'randomKey'
env = 'prod'  // 正式环境请保持env为prod确保安全
debug =  'false'  //  正式环境请确保为false
appName = 'ss-panel3'             //站点名称
baseUrl = 'https://www.google.com'            // 你的站点地址，自己修改
timeZone = 'PRC'        // RPC 天朝时间  UTC 格林时间
pwdMethod = 'sha256'       // 密码加密   可选 md5,sha256
salt = ''               // 密码加密用，从旧版升级请留空
theme    = 'default'   // 主题
session = 'file' //默认
cache   = 'file' //默认
tokenDriver = 'db' //默认
// mu key 用于校验ss-go mu的请求
muKey = ''
// 邮件
mailDriver = 'mailgun'   // mailgun   #smtp不在支持,仅供测试

// 注册限制,每天每个ip能注册的次数
ipDayLimit = '10'

// 邮箱验证设置
emailVerifyEnabled = 'false' // 是否开启注册时邮箱验证 (true:开启 false:关闭)
emailVerifyCodeLength = '8'  // 邮箱验证代码长度
emailVerifyTTL = '30'        // 验证代码有效时间 单位分钟

// 用户签到设置
checkinTime = '22'      // 签到间隔时间 单位小时
checkinMin = '93'       // 签到最少流量 单位MB
checkinMax = '97'       // 签到最多流量

//
defaultTraffic = '5'      // 用户初始流量 单位GB
// 注册后获得的邀请码数量
inviteNum = '5'

// 记录流量日志到dynamodb ,beta,请勿开启
log_traffic_dynamodb = 'false'

# database 数据库配置
db_driver = 'mysql'
db_host = 'localhost'
db_port = '3306'
db_database = 'shadowsocks'
db_username = '你创建的数据库用户名'
db_password = '数据库密码'
db_charset = 'utf8'
db_collation = 'utf8_general_ci'
db_prefix = ''

# redis
redis_scheme = 'tcp'
redis_host = '127.0.0.1'
redis_port = '6379'
redis_database = '0'
redis_pass = ''

# mailgun
mailgun_key = ''
mailgun_domain = ''
mailgun_sender = ''

# smtp
smtp_host = ''
smtp_username = ''
smtp_port = ''
smtp_name = ''
smtp_sender = ''
smtp_passsword = ''
smtp_ssl = 'true'

# aws
aws_access_key_id = ''
aws_secret_access_key = ''
aws_region = 'ap-northeast-1'
aws_ses_region = 'us-east-1'
aws_ses_sender = ''
复制代码
导入数据库
mysql -u 你创建的数据库用户名 -p
>use shadowsocks;
>source /var/www/ss-panel/db.sql;
>flush privileges;
>\q

nginx中添加站点
nano /etc/nginx/conf.d/ss.conf
内容如下：
server {  
    listen 80; ##自己看着改

    server_name 你主机公网IP或者域名;

    root /var/www/ss-panel/public/;
    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}
复制代码
测试一下配置是否正确
nginx -t

重启nginx
service nginx restart
现在就可以访问一下你的网站看看。

网站添加管理员
在网站根目录下执行
php xcat createAdmin
根据提示创建管理员帐号。
创建成功后登录可以在/admin进行管理。

重置流量
php xcat resetTraffic

发送流量使用情况邮件
php xcat sendDiaryMail

安装shadowsocksr

mkdir -p /opt/shadowsocks
cd /opt/shadowsocks

获取源代码
git clone -b manyuser https://github.com/shadowsocksr/shadowsocksr.git
cd shadowsocksr

安装依赖(cymysql)

执行

./setup_cymysql.sh
服务端配置

进入根目录初始化配置：

./initcfg.sh
shadowsocksr目录内，对userapiconfig.py里以下内容进行相应修改：

API_INTERFACE = 'sspanelv3' //修改接口类型
根据你的数据库类型，需正确选择使用sspanelv2, sspanelv3, sspanelv3ssr, glzjinmod, legendsockssr之一

然后修改usermysql.json里面的内容：

{
    "host": "127.0.0.1",
    "port": 3306,
    "user": "数据库用户名",
    "password": "数据库密码",
    "db": "shadowsocks",
    "node_id": 1,
    "transfer_mul": 1.0,
    "ssl_enable": 0,
    "ssl_ca": "",
    "ssl_cert": "",
    "ssl_key": ""
}
以上包括（按次序）：数据库服务器地址，端口，数据库登陆用户名，密码，数据库表，节点ID（sspanelv3支持），流量比率，开启mysql的SSL连接等等

要注意sspanelv3必须正确填写node_id才能正常使用，并且在填写该ID前，必须在面板上已经添加好该节点，以确定节点ID后，再在此处填写。

然后编辑user-config.json：

"method":"aes-256-cfb",                  //修改成您要的加密方式的名称
"protocol": "auth_sha1_v4",              //修改成您要的协议插件名称
"obfs": "tls1.2_ticket_auth_compatible", //修改成您要的混淆插件名称
服务端运行与停止

以下命令在根目录下执行：

python server.py
这时可查看有运行情况，检查有没有错误。如果服务端没有错误，而连接不上，需要检查iptables或firewall(centos7)的防火墙配置

####通过脚本运行#### 以下命令在根目录下执行：

后台运行（无log，ssh窗口关闭后也继续运行）

./run.sh

后台运行（输出log，ssh窗口关闭后也继续运行）

./logrun.sh

后台运行时查看运行情况

./tail.sh

停止运行

./stop.sh

注：通过脚本运行默认日志会保存在根目录的ssserver.log，可手动查看。

更新源代码

如果代码有更新可用本命令更新代码

以下命令在根目录下执行：

执行

git pull

成功后重启ssr服务

其它异常

如果你的服务端python版本在2.6以下，那么必须更新python到2.6.x或2.7.x版本

如果连接数据库遇到这个错误：Can't get hostname for your address，请在数据库服务器的 my.cnf 里 mysqld 添加如下设置

skip-name-resolve

然后重启数据库。
